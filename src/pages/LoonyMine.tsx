import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import Icon from '@/components/ui/icon';

const LoonyMine = () => {
  const [theme, setTheme] = useState('light');
  const [cart, setCart] = useState([]);
  const [currentReview, setCurrentReview] = useState(0);
  const [selectedPayment, setSelectedPayment] = useState('yookassa');
  const [promoApplied, setPromoApplied] = useState(false);
  const [activeSection, setActiveSection] = useState('home');
  const [isCartOpen, setIsCartOpen] = useState(false);
  const [timer, setTimer] = useState({ minutes: 14, seconds: 59 });
  const [onlineCount, setOnlineCount] = useState('--');
  const [toast, setToast] = useState({ show: false, message: '', type: 'success' });
  const [rconConfig, setRconConfig] = useState('');
  const [showAdmin, setShowAdmin] = useState(false);

  // Load cart from localStorage
  useEffect(() => {
    const savedCart = localStorage.getItem('loonymine-cart');
    if (savedCart) setCart(JSON.parse(savedCart));
    
    const savedTheme = localStorage.getItem('loonymine-theme');
    if (savedTheme) setTheme(savedTheme);
  }, []);

  // Save cart to localStorage
  useEffect(() => {
    localStorage.setItem('loonymine-cart', JSON.stringify(cart));
    localStorage.setItem('loonymine-theme', theme);
  }, [cart, theme]);

  // Timer countdown
  useEffect(() => {
    const countdown = setInterval(() => {
      setTimer(prev => {
        if (prev.seconds === 0) {
          if (prev.minutes === 0) return prev;
          return { minutes: prev.minutes - 1, seconds: 59 };
        }
        return { ...prev, seconds: prev.seconds - 1 };
      });
    }, 1000);

    return () => clearInterval(countdown);
  }, []);

  // Fetch online count from mcsrvstat API
  useEffect(() => {
    const fetchOnlineCount = async () => {
      try {
        const response = await fetch('https://api.mcsrvstat.us/2/mc.loonymine.ru');
        const data = await response.json();
        
        if (data.online) {
          setOnlineCount(data.players.online.toString());
        } else {
          setOnlineCount('–û—Ñ–ª–∞–π–Ω');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω–∞:', error);
        // Fallback to mock data if API fails
        const mockOnline = Math.floor(Math.random() * 200) + 50;
        setOnlineCount(mockOnline.toString());
      }
    };

    fetchOnlineCount();
    
    // Update online count every 30 seconds
    const interval = setInterval(fetchOnlineCount, 30000);
    return () => clearInterval(interval);
  }, []);

  // Auto-slide reviews
  useEffect(() => {
    const slideInterval = setInterval(() => {
      setCurrentReview(prev => (prev + 1) % reviews.length);
    }, 5000);

    return () => clearInterval(slideInterval);
  }, []);

  const products = [
    {
      id: 'vip',
      name: 'VIP —Å—Ç–∞—Ç—É—Å',
      price: 299,
      description: '–ü–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫ VIP –∫–æ–º–∞–Ω–¥–∞–º, –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –≤–∞—Ä–ø–∞–º –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º!',
      icon: '‚≠ê',
      color: 'from-purple-500 to-purple-600'
    },
    {
      id: 'premium',
      name: 'Premium',
      price: 599,
      description: '–í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ VIP + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –∫–∏—Ç —Ä–∞–∑ –≤ –¥–µ–Ω—å –∏ –±–æ–ª—å—à–µ —Å–ª–æ—Ç–æ–≤!',
      icon: 'üëë',
      color: 'from-blue-500 to-cyan-500'
    },
    {
      id: 'case',
      name: '–ö–µ–π—Å —É–¥–∞—á–∏',
      price: 99,
      description: '–ü–æ–ø—Ä–æ–±—É–π —É–¥–∞—á—É! –í–Ω—É—Ç—Ä–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –±–ª–æ–∫–∏ –∏ –¥–∞–∂–µ –¥–æ–Ω–∞—Ç —Å—Ç–∞—Ç—É—Å—ã!',
      icon: 'üì¶',
      color: 'from-yellow-500 to-orange-500'
    },
    {
      id: 'coins',
      name: '1000 –∫–æ–∏–Ω–æ–≤',
      price: 149,
      description: '–ò–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –±–ª–æ–∫–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–∑–Ω—ã—Ö –≤–µ—â–µ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ!',
      icon: 'ü™ô',
      color: 'from-green-500 to-emerald-500'
    },
    {
      id: 'unban',
      name: '–†–∞–∑–±–∞–Ω',
      price: 199,
      description: '–ü–æ–ª—É—á–∏ –≤—Ç–æ—Ä–æ–π —à–∞–Ω—Å! –†–∞–∑–±–∞–Ω –ø–æ–º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∏–≥—Ä—É –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏.',
      icon: 'üîì',
      color: 'from-red-500 to-pink-500'
    }
  ];

  const reviews = [
    {
      text: "–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä! –ò–≥—Ä–∞—é —É–∂–µ –ø–æ–ª–≥–æ–¥–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–µ–∫–≤–∞—Ç–Ω–∞—è, –∏–≥—Ä–æ–∫–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ. VIP —Å—Ç–∞—Ç—É—Å —Å—Ç–æ–∏—Ç —Å–≤–æ–∏—Ö –¥–µ–Ω–µ–≥!",
      author: "MineBuilder2020"
    },
    {
      text: "–û—á–µ–Ω—å –∫—Ä—É—Ç—ã–µ –∫–µ–π—Å—ã, –≤—ã–ø–∞–ª–æ –º–Ω–æ–≥–æ —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –°–µ—Ä–≤–µ—Ä —Å—Ç–∞–±–∏–ª—å–Ω—ã–π, –ª–∞–≥–æ–≤ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ—Ç.",
      author: "CraftMaster"
    },
    {
      text: "–õ—É—á—à–∏–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —è –∏–≥—Ä–∞–ª! –≠–∫–æ–Ω–æ–º–∏–∫–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –∫–æ–Ω–∫—É—Ä—Å–æ–≤.",
      author: "DiamondHunter"
    }
  ];

  const faqItems = [
    {
      question: "–ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä?",
      answer: "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ IP: mc.loonymine.ru. –°–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–µ—Ä—Å–∏–∏ –æ—Ç 1.16 –¥–æ 1.21."
    },
    {
      question: "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ–Ω–∞—Ç —Å—Ç–∞—Ç—É—Å?",
      answer: "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ–Ω–∞—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ —ç—Ç–æ–º —Å–∞–π—Ç–µ. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç."
    },
    {
      question: "–ß—Ç–æ –¥–∞–µ—Ç VIP —Å—Ç–∞—Ç—É—Å?",
      answer: "VIP —Å—Ç–∞—Ç—É—Å –¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º, –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –≤–∞—Ä–ø–∞–º, —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–º—É –ª–∏–º–∏—Ç—É —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º."
    },
    {
      question: "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–µ–π—Å—ã?",
      answer: "–ö–µ–π—Å—ã —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Ä–∞–∑–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏. –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∫–µ–π—Å –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –≤–∞–º –≤ –∏–≥—Ä–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    },
    {
      question: "–í–æ–∑–º–æ–∂–µ–Ω –ª–∏ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤?",
      answer: "–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∏ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ."
    }
  ];

  const [openFaq, setOpenFaq] = useState(null);

  const addToCart = (product) => {
    const existingItem = cart.find(item => item.id === product.id);
    if (existingItem) {
      setCart(cart.map(item => 
        item.id === product.id 
          ? { ...item, quantity: item.quantity + 1 }
          : item
      ));
    } else {
      setCart([...cart, { ...product, quantity: 1 }]);
    }
    showToast(`${product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!`);
  };

  const removeFromCart = (id) => {
    setCart(cart.filter(item => item.id !== id));
  };

  const getTotalPrice = () => {
    let total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    if (promoApplied && total >= 50) total -= 50;
    return total;
  };

  const showToast = (message, type = 'success') => {
    setToast({ show: true, message, type });
    setTimeout(() => setToast({ ...toast, show: false }), 3000);
  };

  const copyIP = async () => {
    try {
      await navigator.clipboard.writeText('mc.loonymine.ru');
      showToast('IP –∞–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
    } catch (err) {
      showToast('IP –∞–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
    }
  };

  const applyPromo = (promoCode) => {
    if (promoCode.toLowerCase() === 'loony' && !promoApplied) {
      setPromoApplied(true);
      showToast('–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω! –°–∫–∏–¥–∫–∞ 50‚ÇΩ');
    } else if (promoApplied) {
      showToast('–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω', 'error');
    } else {
      showToast('–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥', 'error');
    }
  };

  const checkout = () => {
    if (cart.length === 0) {
      showToast('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!', 'error');
      return;
    }
    showToast('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ–ø–ª–∞—Ç—É...', 'success');
    setTimeout(() => {
      setCart([]);
      setPromoApplied(false);
      setIsCartOpen(false);
    }, 2000);
  };

  return (
    <div className={`min-h-screen ${theme === 'dark' ? 'bg-slate-900 text-white' : 'bg-white text-gray-900'} transition-colors duration-300`}>
      {/* Timer Banner */}
      {timer.minutes > 0 || timer.seconds > 0 ? (
        <div className="bg-gradient-to-r from-purple-600 to-cyan-500 text-white text-center py-2 font-semibold">
          üî• –°–∫–∏–¥–∫–∞ 25% –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑: {timer.minutes.toString().padStart(2, '0')}:{timer.seconds.toString().padStart(2, '0')}
        </div>
      ) : null}

      {/* Header */}
      <header className={`sticky top-0 z-50 ${theme === 'dark' ? 'bg-slate-800 border-slate-700' : 'bg-white border-gray-200'} border-b backdrop-blur-lg`}>
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <span className="text-2xl">üéÆ</span>
              <h1 className="text-2xl font-bold bg-gradient-to-r from-purple-600 to-cyan-500 bg-clip-text text-transparent">
                LoonyMine
              </h1>
            </div>

            <nav className="hidden md:flex space-x-8">
              {['home', 'rules', 'faq', 'reviews', 'terms', 'admin'].map(section => (
                <button
                  key={section}
                  onClick={() => setActiveSection(section)}
                  className={`font-medium transition-colors ${
                    activeSection === section 
                      ? 'text-purple-600' 
                      : theme === 'dark' ? 'text-gray-300 hover:text-white' : 'text-gray-600 hover:text-gray-900'
                  }`}
                >
                  {section === 'home' && '–ì–ª–∞–≤–Ω–∞—è'}
                  {section === 'rules' && '–ü—Ä–∞–≤–∏–ª–∞'}
                  {section === 'faq' && 'FAQ'}
                  {section === 'reviews' && '–û—Ç–∑—ã–≤—ã'}
                  {section === 'terms' && '–°–æ–≥–ª–∞—à–µ–Ω–∏–µ'}
                  {section === 'admin' && '‚öôÔ∏è –ê–¥–º–∏–Ω'}
                </button>
              ))}
            </nav>

            <div className="flex items-center space-x-4">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
                className="p-2"
              >
                {theme === 'dark' ? '‚òÄÔ∏è' : 'üåô'}
              </Button>
              
              <Button
                onClick={() => setIsCartOpen(true)}
                className="relative bg-purple-600 hover:bg-purple-700"
              >
                üõí –ö–æ—Ä–∑–∏–Ω–∞
                {cart.length > 0 && (
                  <Badge className="absolute -top-2 -right-2 bg-red-500 text-white text-xs">
                    {cart.reduce((sum, item) => sum + item.quantity, 0)}
                  </Badge>
                )}
              </Button>
            </div>
          </div>
        </div>
      </header>

      <main>
        {/* Home Section */}
        {activeSection === 'home' && (
          <div>
            {/* Hero */}
            <section className={`py-20 ${theme === 'dark' ? 'bg-gradient-to-br from-slate-900 to-slate-800' : 'bg-gradient-to-br from-gray-50 to-white'}`}>
              <div className="container mx-auto px-4 text-center">
                <h1 className="text-6xl font-bold mb-6 bg-gradient-to-r from-purple-600 to-cyan-500 bg-clip-text text-transparent">
                  LoonyMine
                </h1>
                <p className="text-xl text-gray-600 dark:text-gray-300 mb-8 max-w-2xl mx-auto">
                  –õ—É—á—à–∏–π Minecraft —Å–µ—Ä–≤–µ—Ä —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É!
                </p>

                <div className="flex justify-center gap-8 mb-8 flex-wrap">
                  <Card className="p-6 text-center min-w-[150px]">
                    <div className="text-3xl font-bold text-purple-600 mb-2">{onlineCount}</div>
                    <div className="text-sm text-gray-600 dark:text-gray-300">–ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω</div>
                  </Card>
                  <Card className="p-6 text-center min-w-[150px]">
                    <div className="text-3xl font-bold text-purple-600 mb-2">1.16-1.21</div>
                    <div className="text-sm text-gray-600 dark:text-gray-300">–í–µ—Ä—Å–∏–∏</div>
                  </Card>
                  <Card className="p-6 text-center min-w-[150px]">
                    <div className="text-3xl font-bold text-purple-600 mb-2">24/7</div>
                    <div className="text-sm text-gray-600 dark:text-gray-300">–†–∞–±–æ—Ç–∞–µ–º</div>
                  </Card>
                </div>

                <Button onClick={copyIP} className="bg-cyan-500 hover:bg-cyan-600 text-white px-8 py-3 text-lg">
                  üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å IP: mc.loonymine.ru
                </Button>
              </div>
            </section>

            {/* Products */}
            <section className="py-16">
              <div className="container mx-auto px-4">
                <h2 className="text-4xl font-bold text-center text-purple-600 mb-4">–î–æ–Ω–∞—Ç —Ç–æ–≤–∞—Ä—ã</h2>
                <p className="text-xl text-center text-gray-600 dark:text-gray-300 mb-12 max-w-2xl mx-auto">
                  –ü–æ–¥–¥–µ—Ä–∂–∏ —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ–ª—É—á–∏ –∫—Ä—É—Ç—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏!
                </p>

                <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
                  {products.map(product => (
                    <Card key={product.id} className="p-6 hover:shadow-lg transition-all duration-300 hover:-translate-y-2">
                      <div className={`w-20 h-20 rounded-xl bg-gradient-to-r ${product.color} flex items-center justify-center text-3xl mb-4 mx-auto`}>
                        {product.icon}
                      </div>
                      <h3 className="text-xl font-bold text-center text-purple-600 mb-4">{product.name}</h3>
                      <p className="text-gray-600 dark:text-gray-300 text-center mb-6">{product.description}</p>
                      <div className="text-3xl font-bold text-center text-cyan-500 mb-6">{product.price}‚ÇΩ</div>
                      <Button 
                        onClick={() => addToCart(product)}
                        className="w-full bg-purple-600 hover:bg-purple-700"
                      >
                        –ö—É–ø–∏—Ç—å {product.name}
                      </Button>
                    </Card>
                  ))}
                </div>
              </div>
            </section>
          </div>
        )}

        {/* Rules Section */}
        {activeSection === 'rules' && (
          <section className="py-16">
            <div className="container mx-auto px-4 max-w-4xl">
              <h2 className="text-4xl font-bold text-center text-purple-600 mb-12">–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞</h2>
              
              <div className="space-y-8">
                <Card className="p-6">
                  <h3 className="text-2xl font-bold text-purple-600 mb-4">1. –û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞</h3>
                  <ul className="space-y-2 text-gray-600 dark:text-gray-300">
                    <li>‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–∏—Ç–æ–≤, –º–æ–¥–æ–≤ –¥–∞—é—â–∏—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ</li>
                    <li>‚Ä¢ –£–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤, –Ω–µ –æ—Å–∫–æ—Ä–±–ª—è–π—Ç–µ –∏ –Ω–µ —Å–ø–∞–º—å—Ç–µ</li>
                    <li>‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤</li>
                    <li>‚Ä¢ –ù–µ –ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</li>
                  </ul>
                </Card>

                <Card className="p-6">
                  <h3 className="text-2xl font-bold text-purple-600 mb-4">2. –ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å</h3>
                  <ul className="space-y-2 text-gray-600 dark:text-gray-300">
                    <li>‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –≥—Ä–∏—Ñ–µ—Ä—Å—Ç–≤–æ —á—É–∂–∏—Ö –ø–æ—Å—Ç—Ä–æ–µ–∫</li>
                    <li>‚Ä¢ PvP —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–æ–Ω–∞—Ö</li>
                    <li>‚Ä¢ –ù–µ —Å—Ç—Ä–æ–π—Ç–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ —á—É–∂–∏–º –¥–æ–º–∞–º</li>
                    <li>‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω—ã –ª–æ–≤—É—à–∫–∏ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤</li>
                  </ul>
                </Card>

                <Card className="p-6">
                  <h3 className="text-2xl font-bold text-purple-600 mb-4">3. –≠–∫–æ–Ω–æ–º–∏–∫–∞</h3>
                  <ul className="space-y-2 text-gray-600 dark:text-gray-300">
                    <li>‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –¥—é–ø–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã</li>
                    <li>‚Ä¢ –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ –∫–∞—Ä–∞–µ—Ç—Å—è –±–∞–Ω–æ–º</li>
                    <li>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫</li>
                  </ul>
                </Card>
              </div>
            </div>
          </section>
        )}

        {/* FAQ Section */}
        {activeSection === 'faq' && (
          <section className="py-16">
            <div className="container mx-auto px-4 max-w-4xl">
              <h2 className="text-4xl font-bold text-center text-purple-600 mb-12">–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</h2>
              
              <div className="space-y-4">
                {faqItems.map((item, index) => (
                  <Card key={index} className="overflow-hidden">
                    <button
                      onClick={() => setOpenFaq(openFaq === index ? null : index)}
                      className="w-full p-6 text-left font-semibold flex justify-between items-center hover:bg-gray-50 dark:hover:bg-slate-800 transition-colors"
                    >
                      {item.question}
                      <span className={`transform transition-transform ${openFaq === index ? 'rotate-45' : ''}`}>
                        +
                      </span>
                    </button>
                    {openFaq === index && (
                      <div className="px-6 pb-6 text-gray-600 dark:text-gray-300">
                        {item.answer}
                      </div>
                    )}
                  </Card>
                ))}
              </div>
            </div>
          </section>
        )}

        {/* Reviews Section */}
        {activeSection === 'reviews' && (
          <section className="py-16">
            <div className="container mx-auto px-4">
              <h2 className="text-4xl font-bold text-center text-purple-600 mb-12">–û—Ç–∑—ã–≤—ã –∏–≥—Ä–æ–∫–æ–≤</h2>
              
              <div className="max-w-4xl mx-auto">
                <Card className="p-8 text-center">
                  <p className="text-xl italic mb-6 text-gray-700 dark:text-gray-300">
                    "{reviews[currentReview].text}"
                  </p>
                  <p className="font-semibold text-purple-600">
                    ‚Äî {reviews[currentReview].author}
                  </p>
                </Card>
                
                <div className="flex justify-center mt-6 space-x-4">
                  <Button 
                    onClick={() => setCurrentReview(currentReview === 0 ? reviews.length - 1 : currentReview - 1)}
                    variant="outline"
                  >
                    ‚ùÆ
                  </Button>
                  <Button 
                    onClick={() => setCurrentReview((currentReview + 1) % reviews.length)}
                    variant="outline"
                  >
                    ‚ùØ
                  </Button>
                </div>
              </div>
            </div>
          </section>
        )}

        {/* Terms Section */}
        {activeSection === 'terms' && (
          <section className="py-16">
            <div className="container mx-auto px-4 max-w-4xl">
              <h2 className="text-4xl font-bold text-center text-purple-600 mb-12">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</h2>
              
              <Card className="p-8 space-y-6">
                <div>
                  <h3 className="text-xl font-bold text-purple-600 mb-2">1. –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è</h3>
                  <p className="text-gray-600 dark:text-gray-300">
                    –ù–∞—Å—Ç–æ—è—â–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π —Å–µ—Ä–≤–µ—Ä–∞ LoonyMine –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
                  </p>
                </div>
                
                <div>
                  <h3 className="text-xl font-bold text-purple-600 mb-2">2. –ü–æ–∫—É–ø–∫–∞ –¥–æ–Ω–∞—Ç —Å—Ç–∞—Ç—É—Å–æ–≤</h3>
                  <p className="text-gray-600 dark:text-gray-300">
                    –ü—Ä–∏–æ–±—Ä–µ—Ç–∞—è –¥–æ–Ω–∞—Ç —Å—Ç–∞—Ç—É—Å, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –≤ –∏–≥—Ä–µ. –î–∞–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –≤–æ–∑–≤—Ä–∞—Ç—É, –∫—Ä–æ–º–µ —Å–ª—É—á–∞–µ–≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–±–æ–µ–≤.
                  </p>
                </div>
                
                <div>
                  <h3 className="text-xl font-bold text-purple-600 mb-2">3. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å</h3>
                  <p className="text-gray-600 dark:text-gray-300">
                    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Ç–µ—Ä—é –∏–≥—Ä–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–±–æ–µ–≤.
                  </p>
                </div>
              </Card>
            </div>
          </section>
        )}

        {/* Admin Section */}
        {activeSection === 'admin' && (
          <section className="py-16">
            <div className="container mx-auto px-4 max-w-4xl">
              <h2 className="text-4xl font-bold text-center text-purple-600 mb-12">‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h2>
              
              <div className="space-y-8">
                <Card className="p-6">
                  <h3 className="text-xl font-bold text-purple-600 mb-4">RCON –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        RCON –•–æ—Å—Ç:–ü–æ—Ä—Ç
                      </label>
                      <input
                        type="text"
                        value={rconConfig}
                        onChange={(e) => setRconConfig(e.target.value)}
                        placeholder="mc.loonymine.ru:25575"
                        className="w-full p-3 border rounded-lg bg-white dark:bg-slate-800 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        RCON –ü–∞—Ä–æ–ª—å
                      </label>
                      <input
                        type="password"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ RCON –ø–∞—Ä–æ–ª—å"
                        className="w-full p-3 border rounded-lg bg-white dark:bg-slate-800 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white"
                      />
                    </div>
                    
                    <div className="flex space-x-4">
                      <Button className="bg-green-600 hover:bg-green-700">
                        üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                      </Button>
                      <Button variant="outline">
                        üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                      </Button>
                    </div>
                  </div>
                </Card>

                <Card className="p-6">
                  <h3 className="text-xl font-bold text-purple-600 mb-4">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</h3>
                  <div className="grid md:grid-cols-3 gap-4">
                    <div className="p-4 bg-gray-50 dark:bg-slate-800 rounded-lg">
                      <div className="text-2xl font-bold text-green-600">{onlineCount}</div>
                      <div className="text-sm text-gray-600 dark:text-gray-300">–ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω</div>
                    </div>
                    <div className="p-4 bg-gray-50 dark:bg-slate-800 rounded-lg">
                      <div className="text-2xl font-bold text-blue-600">{cart.reduce((sum, item) => sum + item.quantity, 0)}</div>
                      <div className="text-sm text-gray-600 dark:text-gray-300">–í –∫–æ—Ä–∑–∏–Ω–∞—Ö</div>
                    </div>
                    <div className="p-4 bg-gray-50 dark:bg-slate-800 rounded-lg">
                      <div className="text-2xl font-bold text-purple-600">{getTotalPrice()}‚ÇΩ</div>
                      <div className="text-sm text-gray-600 dark:text-gray-300">–û–±—â–∞—è —Å—É–º–º–∞</div>
                    </div>
                  </div>
                </Card>

                <Card className="p-6">
                  <h3 className="text-xl font-bold text-purple-600 mb-4">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–º</h3>
                  <div className="flex space-x-4 items-center">
                    <Button 
                      onClick={() => setTimer({ minutes: 14, seconds: 59 })}
                      variant="outline"
                    >
                      üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä
                    </Button>
                    <Button 
                      onClick={() => setTimer({ minutes: 0, seconds: 0 })}
                      variant="destructive"
                    >
                      ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ü–∏—é
                    </Button>
                  </div>
                </Card>
              </div>
            </div>
          </section>
        )}
      </main>

      {/* Cart Modal */}
      {isCartOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
          <Card className="w-full max-w-md max-h-[80vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <h3 className="text-xl font-bold">–ö–æ—Ä–∑–∏–Ω–∞</h3>
                <Button variant="ghost" onClick={() => setIsCartOpen(false)}>
                  ‚úï
                </Button>
              </div>

              {cart.length === 0 ? (
                <p className="text-center text-gray-500 py-8">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
              ) : (
                <div className="space-y-4">
                  {cart.map(item => (
                    <div key={item.id} className="flex justify-between items-center p-3 bg-gray-50 dark:bg-slate-800 rounded">
                      <div>
                        <div className="font-semibold">{item.name}</div>
                        <div className="text-sm text-gray-600 dark:text-gray-300">
                          {item.price}‚ÇΩ √ó {item.quantity}
                        </div>
                      </div>
                      <Button 
                        variant="destructive" 
                        size="sm"
                        onClick={() => removeFromCart(item.id)}
                      >
                        –£–¥–∞–ª–∏—Ç—å
                      </Button>
                    </div>
                  ))}
                </div>
              )}

              <div className="mt-6">
                <input
                  type="text"
                  placeholder="–ü—Ä–æ–º–æ–∫–æ–¥ (LOONY –¥–ª—è —Å–∫–∏–¥–∫–∏ 50‚ÇΩ)"
                  className="w-full p-3 border rounded mb-2"
                  onKeyPress={(e) => {
                    if (e.key === 'Enter') {
                      applyPromo(e.target.value);
                      e.target.value = '';
                    }
                  }}
                />
              </div>

              <div className="text-xl font-bold text-center my-4">
                –ò—Ç–æ–≥–æ: {getTotalPrice()}‚ÇΩ
              </div>

              <div className="grid grid-cols-2 gap-2 mb-4">
                {['–ÆKassa', 'Robokassa', 'CrystalPay', 'QIWI', '–°–ë–ü'].map(method => (
                  <button
                    key={method}
                    onClick={() => setSelectedPayment(method.toLowerCase())}
                    className={`p-2 border rounded text-sm transition-colors ${
                      selectedPayment === method.toLowerCase() 
                        ? 'border-purple-600 bg-purple-50 dark:bg-purple-900' 
                        : 'border-gray-300'
                    }`}
                  >
                    {method}
                  </button>
                ))}
              </div>

              <Button 
                onClick={checkout} 
                className="w-full bg-green-600 hover:bg-green-700"
                disabled={cart.length === 0}
              >
                –û–ø–ª–∞—Ç–∏—Ç—å
              </Button>
            </div>
          </Card>
        </div>
      )}

      {/* Toast */}
      {toast.show && (
        <div className={`fixed bottom-4 right-4 p-4 rounded shadow-lg z-50 transition-all ${
          toast.type === 'error' ? 'bg-red-500' : 'bg-green-500'
        } text-white`}>
          {toast.message}
        </div>
      )}
    </div>
  );
};

export default LoonyMine;